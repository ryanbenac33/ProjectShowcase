class(df_complete$LWingLength) = "double"
class(df_complete$LWingWidth) = "double"
class(df_complete$LBlackPatchApex) = "double"
class(df_complete$RWingLength) = "double"
class(df_complete$RWingWidth) = "double"
class(df_complete$RBlackPatchApex) = "double"
### t-test ###
# create working df and remove NA before t-test
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_working)
# choose columns, we will do 2 separate t tests; one for length and one for width
lWingLen <- df_working$RWingLength
rWingLen <- df_working$RWingWidth
lWingWid <- df_working$LWingLength
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
# import libraries
library(tidyverse)
library(dplyr)
library(readxl)
library(lubridate)
library(stringr)
# clear workspace and set wd
rm(list=ls())
setwd("C:/Users/benac/Documents/GitHub/data332/butterfly/Original Data")
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA.xlsx", sheet=1)
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=1)
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA  - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=1)
# rename core column in clean data
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
# align naming conventions of columns in case of join
class(df_complete$coreid) = "character"
class(df_complete$SexUpdated) = "character"
class(df_complete$LWingLength) = "double"
class(df_complete$LWingWidth) = "double"
class(df_complete$LBlackPatchApex) = "double"
class(df_complete$RWingLength) = "double"
# align naming conventions of columns in case of join
class(df_complete$coreid) = "character"
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=2)
# rename core column in clean data
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
# align naming conventions of columns in case of join
class(df_complete$coreid) = "character"
class(df_complete$SexUpdated) = "character"
class(df_complete$LWingLength) = "double"
class(df_complete$LWingWidth) = "double"
class(df_complete$LBlackPatchApex) = "double"
class(df_complete$RWingLength) = "double"
class(df_complete$RWingWidth) = "double"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# make sure years are ready
unique(df_complete$YearUpdated)
### t-test ###
# create working df and remove NA before t-test
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_working)
### understanding the analysis features in this dataset
descrips <- describe(df_complete)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)
# clear workspace and set wd
rm(list=ls())
library(Hmisc)
# import libraries
library(tidyverse)
library(dplyr)
library(readxl)
library(lubridate)
library(stringr)
library(Hmisc)
# clear workspace and set wd
rm(list=ls())
setwd("C:/Users/benac/Documents/GitHub/data332/butterfly/Original Data")
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA  - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=2)
# rename column in clean data in case of join
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# make sure years are ready
unique(df_complete$YearUpdated)
### understanding the analysis features in this dataset
descrips <- describe(df_complete)
### understanding the analysis features in this dataset
descript <- describe(df_complete)
descript
# make sure years are ready
unique(df_complete$YearUpdated)
### understanding the analysis features in this dataset
descript <- describe(df_complete)
descript
# create working df and remove NA
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
### visualizations ###
# this analysis focuses only on wing proportions including wing length, width, and apex spot
### t-test ###
# choose columns, we will do 2 separate t tests; one for length and one for width
lWingLen <- df_working$RWingLength
# create working df and remove NA
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
### visualizations ###
# this analysis focuses only on wing proportions including wing length, width, and apex spot
### t-test ###
# choose columns, we will do 2 separate t tests; one for length and one for width
lWingLen <- df_working$RWingLength
# import libraries
library(tidyverse)
library(dplyr)
library(readxl)
library(lubridate)
library(stringr)
library(Hmisc)
# clear workspace and set wd
rm(list=ls())
setwd("C:/Users/benac/Documents/GitHub/data332/butterfly/Original Data")
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA  - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=2)
# rename column in clean data in case of join
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# make sure years are ready
unique(df_complete$YearUpdated)
### understanding the analysis features in this dataset
descript <- describe(df_complete)
descript
# create working df and remove NA
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
### visualizations ###
# this analysis focuses only on wing proportions including wing length, width, and apex spot
### t-test ###
# choose columns, we will do 2 separate t tests; one for length and one for width
lWingLen <- df_working$RWingLength
# create working df and remove NA
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth")
## get stats of proportions
# left wing length
lWingLenMin <- min(df_complete$LWingLength)
lWingLenMax <- max(df_complete$LWingLength)
lWingLenAvg<- mean(df_complete$LWingLength)
# right wing length
rWingLenMin <- min(df_complete$RWingLength)
rWingLenMax <- max(df_complete$RWingLength)
# remove NA values
na.omit(df_working)
# remove NA values
na.omit(df_complete)
# remove NA values
df_complete <- na.omit(df_complete)
# import libraries
library(tidyverse)
library(dplyr)
library(readxl)
library(lubridate)
library(stringr)
library(Hmisc)
# clear workspace and set wd
rm(list=ls())
setwd("C:/Users/benac/Documents/GitHub/data332/butterfly/Original Data")
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA  - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=2)
# rename column in clean data in case of join
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# left wing width
lWingWidMin <- min(df_complete$LWingWidth)
lWingWidMax <- max(df_complete$LWingWidth)
lWingWidAvg<- mean(df_complete$LWingWidth)
# right wing width
rWingWidMin <- min(df_complete$RWingWidth)
rWingWidMax <- max(df_complete$RWingWidth)
rWingWidAvg<- mean(df_complete$RWingWidth)
## get stats of proportions
# left wing length
lWingLenMin <- min(df_complete$LWingLength)
lWingLenMax <- max(df_complete$LWingLength)
lWingLenAvg<- mean(df_complete$LWingLength)
# right wing length
rWingLenMin <- min(df_complete$RWingLength)
rWingLenMax <- max(df_complete$RWingLength)
rWingLenAvg<- mean(df_complete$RWingLength)
# import libraries
library(tidyverse)
library(dplyr)
library(readxl)
library(lubridate)
library(stringr)
library(Hmisc)
# clear workspace and set wd
rm(list=ls())
setwd("C:/Users/benac/Documents/GitHub/data332/butterfly/Original Data")
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA  - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=2)
# rename column in clean data in case of join
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# make sure years are ready
unique(df_complete$YearUpdated)
### understanding the analysis features in this dataset
descript <- describe(df_complete)
descript
# create working df
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_complete)
## get stats of proportions
# left wing length
lWingLenMin <- min(df_complete$LWingLength)
lWingLenMax <- max(df_complete$LWingLength)
lWingLenAvg<- mean(df_complete$LWingLength)
unique(lWingLenAvg)
unique(df_complete$LWingLength)
class(df_working$LWingLength) = "double"
class(df_working$LWingWidth) = "double"
class(df_working$RWingLength) = "double"
class(df_working$RWingWidth) = "double"
# create working df
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_complete)
class(df_working$LWingLength) = "double"
class(df_working$LWingWidth) = "double"
class(df_working$RWingLength) = "double"
class(df_working$RWingWidth) = "double"
## get stats of proportions
# left wing length
lWingLenMin <- min(df_complete$LWingLength)
lWingLenMax <- max(df_complete$LWingLength)
lWingLenAvg<- mean(df_complete$LWingLength)
unique(df_complete$LWingLength)
# clear workspace and set wd
rm(list=ls())
setwd("C:/Users/benac/Documents/GitHub/data332/butterfly/Original Data")
# import excel sheets as data frames
df_cleanLWA <- read_excel("Cleaned Data LWA  - ORIGINAL.xlsx", sheet=1)
df_complete <- read_excel("CompletePierisData_2022-03-09 - ORIGINAL.xlsx", sheet=2)
# rename column in clean data in case of join
names(df_cleanLWA) <- str_replace_all(names(df_cleanLWA), " ", "")
names(df_cleanLWA)[names(df_cleanLWA) == "coreID"] <- "coreid"
names(df_cleanLWA)[names(df_cleanLWA) == "sex"] <- "SexUpdated"
names(df_cleanLWA)[names(df_cleanLWA) == "LWlength"] <- "LWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "LWwidth"] <- "LWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "LWapexA"] <- "LBlackPatchApex"
names(df_cleanLWA)[names(df_cleanLWA) == "RWlength"] <- "RWingLength"
names(df_cleanLWA)[names(df_cleanLWA) == "RWwidth"] <- "RWingWidth"
names(df_cleanLWA)[names(df_cleanLWA) == "RWapexA"] <- "RBlackPatchApex"
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# make sure years are ready
unique(df_complete$YearUpdated)
### understanding the analysis features in this dataset
descript <- describe(df_complete)
descript
# create working df
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_complete)
class(df_working$LWingLength) = "double"
class(df_working$LWingWidth) = "double"
class(df_working$RWingLength) = "double"
class(df_working$RWingWidth) = "double"
## get stats of proportions
# left wing length
lWingLenMin <- min(df_working$LWingLength)
lWingLenMax <- max(df_working$LWingLength)
lWingLenAvg<- mean(df_working$LWingLength)
# right wing length
rWingLenMin <- min(df_working$RWingLength)
rWingLenMax <- max(df_working$RWingLength)
rWingLenAvg<- mean(df_working$RWingLength)
# left wing width
lWingWidMin <- min(df_working$LWingWidth)
lWingWidMax <- max(df_working$LWingWidth)
lWingWidAvg<- mean(df_working$LWingWidth)
# right wing width
rWingWidMin <- min(df_working$RWingWidth)
rWingWidMax <- max(df_working$RWingWidth)
rWingWidAvg<- mean(df_working$RWingWidth)
test <- 1
unique(df_working$LWingLength)
View(df_working)
te$LWingLength) = "double"
class(df_complete$LWingWidth) = "double"
class(df_complete$RWingLength) = "double"
class(df_complet
# change column data type to double
class(df_complete$LWingLength) = "double"
class(df_complete$LWingWidth) = "double"
class(df_complete$RWingLength) = "double"
class(df_complete$RWingWidth) = "double"
# create working df
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_complete)
unique(df_working$LWingLength)
# create working df
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_complete)
### data cleaning ###
# clean only the complete dataset
# make sure SexUpdated is all male or female
unique(df_complete$SexUpdated)
df_complete$SexUpdated[df_complete$SexUpdated == "M"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "F?"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "F"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Female"] <- "female"
df_complete$SexUpdated[df_complete$SexUpdated == "Male"] <- "male"
df_complete$SexUpdated[df_complete$SexUpdated == "male?"] <- "male"
unique(df_complete$SexUpdated)
# make sure years are ready
unique(df_complete$YearUpdated)
### understanding the analysis features in this dataset
descript <- describe(df_complete)
descript
# change column data type to double
class(df_complete$LWingLength) = "double"
class(df_complete$LWingWidth) = "double"
class(df_complete$RWingLength) = "double"
class(df_complete$RWingWidth) = "double"
# create working df
df_working <- df_complete %>%
dplyr::select("coreid", "SexUpdated", "LWingLength", "LWingWidth", "RWingLength", "RWingWidth") %>%
na.omit(df_complete)
View(df_working)
## get stats of proportions
# left wing length
lWingLenMin <- min(df_working$LWingLength)
lWingLenMax <- max(df_working$LWingLength)
lWingLenAvg<- mean(df_working$LWingLength)
# right wing length
rWingLenMin <- min(df_working$RWingLength)
rWingLenMax <- max(df_working$RWingLength)
rWingLenAvg<- mean(df_working$RWingLength)
# left wing width
lWingWidMin <- min(df_working$LWingWidth)
lWingWidMax <- max(df_working$LWingWidth)
lWingWidAvg<- mean(df_working$LWingWidth)
# right wing width
rWingWidMin <- min(df_working$RWingWidth)
rWingWidMax <- max(df_working$RWingWidth)
rWingWidAvg<- mean(df_working$RWingWidth)
tab <- matrix(c(7, 5, 14, 19, 3, 2, 17, 6, 12), ncol=3, byrow=TRUE)
colnames(tab) <- c('colName1','colName2','colName3')
rownames(tab) <- c('rowName1','rowName2','rowName3')
tab <- as.table(tab)
tab
## put all info in a table for easy viewing
propTble <- matrix(c(lWingLenMin, lWingLenAvg, lWingLenMax, lWingWidMin, lWingWidAvg, lWingWidMax, rWingLenMin, rWingLenAvg, rWingLenMax, rWingWidMin, rWingWidAvg, rWingWidMax))
colnames(propTble) <- ('Min', 'Average', 'Max')
colnames(propTble) <- c('Min', 'Average', 'Max')
## put all info in a table for easy viewing
propTble <- matrix(c(lWingLenMin, lWingLenAvg, lWingLenMax, lWingWidMin, lWingWidAvg, lWingWidMax, rWingLenMin, rWingLenAvg, rWingLenMax, rWingWidMin, rWingWidAvg, rWingWidMax), ncol=3)
## put all info in a table for easy viewing
propTble <- matrix(c(lWingLenMin, lWingLenAvg, lWingLenMax, lWingWidMin, lWingWidAvg, lWingWidMax, rWingLenMin, rWingLenAvg, rWingLenMax, rWingWidMin, rWingWidAvg, rWingWidMax), ncol=3)
colnames(propTble) <- c('Min', 'Average', 'Max')
rownames(propTble) <- c('Left Length', 'Left Width', 'Right Length', 'Right Width')
propTble <- as.table(propTbl)
propTble <- as.table(propTble)
propTble
## put all info in a table for easy viewing
propTble <- matrix(c(lWingLenMin, lWingLenAvg, lWingLenMax, lWingWidMin, lWingWidAvg, lWingWidMax, rWingLenMin, rWingLenAvg, rWingLenMax, rWingWidMin, rWingWidAvg, rWingWidMax), ncol=4)
colnames(propTble) <- c('Min', 'Average', 'Max')
rownames(propTble) <- c('Left Length', 'Left Width', 'Right Length', 'Right Width')
propTble <- as.table(propTble)
propTble
3
3
3
3
## put all info in a table for easy viewing
propTble <- matrix(c(lWingLenMin, lWingLenAvg, lWingLenMax, lWingWidMin, lWingWidAvg, lWingWidMax, rWingLenMin, rWingLenAvg, rWingLenMax, rWingWidMin, rWingWidAvg, rWingWidMax), ncol=3)
colnames(propTble) <- c('Min', 'Average', 'Max')
rownames(propTble) <- c('Left Length', 'Left Width', 'Right Length', 'Right Width')
propTble <- as.table(propTble)
propTble
## put all info in a table for easy viewing
propTble <- c(c(lWingLenMin, lWingLenAvg, lWingLenMax), c(lWingWidMin, lWingWidAvg, lWingWidMax), c(rWingLenMin, rWingLenAvg, rWingLenMax), c(rWingWidMin, rWingWidAvg, rWingWidMax))
colnames(propTble) <- c('Min', 'Average', 'Max')
rownames(propTble) <- c('Left Length', 'Left Width', 'Right Length', 'Right Width')
colnames(propTble) <- c('Min', 'Average', 'Max')
propTble
